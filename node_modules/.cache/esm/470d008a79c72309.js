let Koa,Router,bodyParser,mongoose,api,jwtMiddleware;_79c‍.w("koa",[["default",["Koa"],function(v){Koa=v}]]);_79c‍.w("koa-router",[["default",["Router"],function(v){Router=v}]]);_79c‍.w("koa-bodyparser",[["default",["bodyParser"],function(v){bodyParser=v}]]);_79c‍.w("mongoose",[["default",["mongoose"],function(v){mongoose=v}]]);_79c‍.w("./api",[["default",["api"],function(v){api=v}]]);_79c‍.w("./lib/jwtMiddleware",[["default",["jwtMiddleware"],function(v){jwtMiddleware=v}]]);require('dotenv').config();









//비구조 할당을 통해 process.env 내부 값에 대한 래퍼런스 만들기
const { PORT, MONGO_URI } = process.env;

mongoose
  .connect(MONGO_URI, {
    useNewUrlParser: true,
    useFindAndModify: false,
    useUnifiedTopology: true,
  })
  .then(() => {
    console.log('Connected to MongoDB');
  })
  .catch(e => {
    _79c‍.g.console.log(e);
  });

const app = new Koa();
const router = new Router();

// 라우터 설정
router.use('/api', api.routes());

// 라우터 적용 전에 bodyparser 적용
app.use(bodyParser());
app.use(jwtMiddleware);

// app 인스턴스에 라우터 적용
app.use(router.routes()).use(router.allowedMethods());

const port = PORT || 4000;
app.listen(port, () => {
  _79c‍.g.console.log('Listing to port %d', port);
});
